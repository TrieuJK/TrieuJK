#include <iostream>
#include<vector>
#include<queue>
using namespace std;

namespace MyFunc {
    template <typename T>
    T Max(T a, T b) {
        return a > b ? a : b;
    }
}

struct Node {
    int key, height;
    Node *left, *right;
    Node(int val) : key(val), height(1), left(nullptr), right(nullptr) {}
};

int getHeight(Node* node) {
    return node ? node->height : 0;
}

int getBalance(Node* node) {
    return node ? getHeight(node->left) - getHeight(node->right) : 0;
}

Node* rotateLeft(Node* y) {
    Node* x = y->right;
    Node* T = x->left;

    x->left = y;
    y->right = T;

    y->height = MyFunc::Max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = MyFunc::Max(getHeight(x->left), getHeight(x->right)) + 1;

    return x;
}

Node* rotateRight(Node* x) {
    Node* y = x->left;
    Node* T = y->right;

    y->right = x;
    x->left = T;

    x->height = MyFunc::Max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = MyFunc::Max(getHeight(y->left), getHeight(y->right)) + 1;

    return y;
}

Node* insert(Node* root, int key) {
    if (!root) return new Node(key);

    if (key < root->key)
        root->left = insert(root->left, key);
    else if (key > root->key)
        root->right = insert(root->right, key);
    else
        return root; // duplicate keys not allowed

    root->height = MyFunc::Max(getHeight(root->left), getHeight(root->right)) + 1;

    int balance = getBalance(root);

    // Left Left Case
    if (balance > 1 && key < root->left->key)
        return rotateRight(root);

    // Right Right Case
    if (balance < -1 && key > root->right->key)
        return rotateLeft(root);

    // Left Right Case
    if (balance > 1 && key > root->left->key) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }

    // Right Left Case
    if (balance < -1 && key < root->right->key) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }

    return root;
}

int findMin(Node* root) {
    if (!root) return -1;
    while (root->left) root = root->left;
    return root->key;
}

Node* updateAVL(Node* root) {
    if (!root) return nullptr;

    root->height = MyFunc::Max(getHeight(root->left), getHeight(root->right)) + 1;
    int balance = getBalance(root);

    // Left Left Case
    if (balance > 1 && getBalance(root->left) >= 0)
        return rotateRight(root);

    // Left Right Case
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }

    // Right Right Case
    if (balance < -1 && getBalance(root->right) <= 0)
        return rotateLeft(root);

    // Right Left Case
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }

    return root;
}

bool DeleteNode(Node*& root, int key) {
    if (!root) return false;

    if (key < root->key) {
        if (!DeleteNode(root->left, key)) return false;
    } else if (key > root->key) {
        if (!DeleteNode(root->right, key)) return false;
    } else {
        // Found the node to delete
        if (!root->left && !root->right) {
            delete root;
            root = nullptr;
        } else if (!root->left) {
            Node* temp = root;
            root = root->right;
            delete temp;
        } else if (!root->right) {
            Node* temp = root;
            root = root->left;
            delete temp;
        } else {
            int minVal = findMin(root->right);
            root->key = minVal;
            DeleteNode(root->right, minVal);
        }
    }

    if (root) {
        root = updateAVL(root);
    }

    return true;
}

Node* findLCA(Node* root, int p, int q) {
    if (!root) return nullptr;
    if (p < root->key && q < root->key)
        return findLCA(root->left, p, q);
    if (p > root->key && q > root->key)
        return findLCA(root->right, p, q);
    return root;
}

int findLCA2(Node *root, int p, int q) {
    if (root == nullptr) return -1;
    if (root->key == p || root->key == q) return root->key;
    int left = findLCA2(root->left, p, q);
    int right = findLCA2(root->right, p, q);
    if (left != -1 && right != -1) return root->key;
    return (left != -1) ? left : right;
}

void deleteTree(Node *root) {
    if (root == nullptr) return;

    deleteTree(root->left);
    deleteTree(root->right);

    delete root;
}

bool binarySearch(const std::vector<int> &arr, int key, std::vector<int> &comparisons) {
    int start = 0;
    int end = arr.size() - 1;

    while (start <= end) {
        int median = start + (end - start) / 2;
        comparisons.push_back(arr[median]);

        if (arr[median] == key) return true;
        if (arr[median] > key) end = median - 1;
        else start = median + 1;
    }
    return false;
}

bool search(Node * root, int key){
    if(!root) return false;
    if(root->key == key) return true;
    if(key < root->key) return search(root->left, key);
    else return search(root->right, key);
}

// Preorder traversal (root, left, right)
void preorderTraversal(Node *root) {
    if(!root) return;
    cout << root->key << " ";
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

// Inorder traversal (left, root, right)
void inorderTraversal(Node *root) {
    if(!root)return;
    inorderTraversal(root->left);
    cout << root->key << " ";
    inorderTraversal(root->right);
}

// Postorder traversal (left, right, root)
void postorderTraversal(Node *root) {
    if(!root) return;
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    cout << root->key << " ";
}

// Level order traversal using queue
void levelOrderTraversal(Node *root) {
    if(!root) return;
    queue<Node*> q;
    q.push(root);
    while(!q.empty()){
        Node * cur = q.front();
        cout << cur << " ";
        q.pop();
        if(cur->left) q.push(cur->left);
        if(cur->right) q.push(cur->right);
    }
}

Node* buildAVL(const vector<int>& arr) {
    Node* root = nullptr;
    for (int key : arr) {
        root = insert(root, key); // this is your AVL insert
    }
    return root;
}

Node *createPerfectBST(const std::vector<int> &sortedKeys, int start, int end) {
    if (start > end) return nullptr;

    int median = start + (end - start) / 2;  
    Node *root = new Node(sortedKeys[median]);

    root->left = createPerfectBST(sortedKeys, start, median - 1); 
    root->right = createPerfectBST(sortedKeys, median + 1, end);  

    return root;
}
Node *createPerfectBST(const std::vector<int> &sortedKeys) {
    return createPerfectBST(sortedKeys, 0, sortedKeys.size() - 1);
}

bool isAVL(Node* root) {
    if (!root) return true;

    int balance = getBalance(root);
    if (balance < -1 || balance > 1) return false;

    return isAVL(root->left) && isAVL(root->right);
}
bool isFull(Node* root){
    if(!root) return true;
    if(!root->left && !root->right ) return true;
    if (root->left && root->right) return isFull(root->left) && isFull(root->right);
    return false;
}
bool isComplete(Node* root){
vector<Node*> arr;
arr.push_back(root);
size_t i = 0;
bool CheckPoint = false;

while(i < arr.size()){
    Node * cur = arr[i++];
    
    if(cur->left){
        if(CheckPoint) return false;
        arr.push_back(cur->left); 
    }else CheckPoint = true;
    
    if(cur->right){
        if(CheckPoint) return false;
        arr.push_back(cur->right);
    }else CheckPoint = true;
}
return true;
}
bool isPerfect(Node* root){
vector<Node*> nodes;
nodes.push_back(root);
size_t i = 0;
while( i < nodes.size()){
    Node * cur = nodes[i++];
    if(cur->left) nodes.push_back(cur->left);
    if(cur->right) nodes.push_back(cur->right);
}
int count = nodes.size();
int height = 0;
Node * Brows = root;
while(Brows) {
    height++;
    Brows = Brows->left;
}
return count == (1 << height) - 1;
}

int main() {
    int n;
    cin >> n;
    Node* root = nullptr;
    while (n--) {
        int x;
        cin >> x;
        root = insert(root, x);
    }

    int p, q;
    cin >> p >> q;
    Node* lca = findLCA(root, p, q);
    cout << lca->key;
    return 0;
}
