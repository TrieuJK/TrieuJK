#include<iostream>
#include<vector>
#include<queue>
using namespace std;
///
struct Node
{
    int key, height;
    Node * right;
    Node * left;
    Node(int val) : key(val), right(nullptr), left(nullptr), height(1){}
};
int getHeight(Node * root){
    return root ?   root->height : 0;
}

int getBalance(Node  * root){
    if(!root) return 0;
    return getHeight(root->left) - getHeight(root->right);
}
Node * rLeft(Node * x){
    Node * y = x->right;
    Node * T = y->left;

    y->left = x;
    x->right = T;

    x->height = 1 + max(getHeight(x->left), getHeight(x->right));
    y->height = 1 + max(getHeight(y->left), getHeight(y->right));
    return y;
}
Node * rRight(Node * x){
    Node * y = x->left;
    Node * T = y->right;

    y->right = x;
    x->left = T;

    x->height = 1 + max(getHeight(x->left), getHeight(x->right));
    y->height = 1 + max(getHeight(y->left), getHeight(y->right));
    return y;
}

// Bước 1: Duyệt inorder BST
void inorder(Node* root, vector<int>& vals) {
    if (!root) return;
    inorder(root->left, vals);
    vals.push_back(root->key);
    inorder(root->right, vals);
}

// Bước 2 & 3: Chèn vào AVL
Node* insertAVL(Node* root, int key) {
    if(!root) return new Node(key);
    if(key < root->key){
        root->left = insertAVL(root->left,key);
    }
    else if(key > root->key){
        root->right = insertAVL(root->right, key);
    }
    else return root;

    root->height = 1 + max(getHeight(root->left), getHeight(root->right));
    int balance = getBalance(root);
    if(balance > 1 && key < root->left->key){
        return rRight(root);
    }
    if(balance > 1 && key > root->left->key){
        root->left = rLeft(root->left);
        return rRight(root);
    }
    if(balance < -1 && key > root->right->key){
        return rLeft(root);
    }
    if(balance < -1 && key < root->right->key){
        root->right = rRight(root->right);
        return rLeft(root);
    }
    return root;
}

int finMin(Node * root){
    while(root->left) root = root->left;
    return root->key;
}
Node * rm(Node * root, int key){
    if(!root) return nullptr;
    if(key < root->key) root->left = rm(root->left, key);
    else if(key > root->key) root->right = rm(root->right, key);
    else{
        if(!root->left && !root->right) {
            delete root;
            root = nullptr;
        }else if(!root->left || !root->right ){
            Node * temp = root;
            root = root->left ? root->left : root->right;
            delete temp;
        }else{
            int Min = finMin(root->right);
            root->key = Min;
            root->right = rm(root->right, Min);
        }
    } 
    if(!root) return nullptr;
    root->height = 1 + max(getHeight(root->left), getHeight(root->right));
    int balance = getBalance(root);
    if(balance > 1 && getBalance(root->left) >= 0) return rRight(root);
    if(balance > 1 && getBalance(root->left) < 0) {
        root->left = rLeft(root->left);
        return rRight(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0)
        return rLeft(root);
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rRight(root->right);
        return rLeft(root);
    }
    return root;
}
bool search(Node * root, int key){
    if(!root) return false;
    if(root->key == key) return true;
    if(key < root->key) return search(root->left, key);
    if(key > root->key) return search(root->right, key);
    return false;
}
Node* BSTtoAVL(Node* bstRoot) {
    vector<int> vals;
    inorder(bstRoot, vals);
    Node* avlRoot = nullptr;
    for (int x : vals) {
        avlRoot = insertAVL(avlRoot, x);
    }
    return avlRoot;
}
Node* LCA(Node* root, int n1, int n2) {
    if (!root) return nullptr;
    if (root->key > n1 && root->key > n2)
        return LCA(root->left, n1, n2);
    if (root->key < n1 && root->key < n2)
        return LCA(root->right, n1, n2);
    return root;
}
void printInorder(Node* root) {
    if (!root) return;
    printInorder(root->left);
    cout << root->key << " ";
    printInorder(root->right);
}
///
struct Entry{
    int key, value;
};

struct Hashing{
    vector<Entry> table;
    Hashing(int size){
        table.resize(size);
        for(int i = 0; i < size; i++){
            table[i].key = -1;
        }
    }
    int hash(int key){
        return key % table.size();
    }

    int LinearCollision(int h){
        if(table[h].key == -1) return h;
        for(int i = 1; i < table.size(); i++){
            int index = (h + i) % table.size();
            if(table[index].key == -1) return index;
        }
        return -1;
    }

    bool insert(int key, int value){
        int h = hash(key);
        if(table[h].key == -1) {
            table[h].key = key;
            table[h].value = value;
            return true;
        }
        int index = LinearCollision(h);
        if(index == -1) return false;
        table[index].key = key;
        table[index].value = value;
        return true;
    }
    bool rm(int key){
        int h = hash(key);
        for(int i = 0; i < table.size(); i++){
            int index = (h + i) % table.size();
            if(table[index].key == -1) return false; // Không tìm thấy
            if(table[index].key == key) {
                table[index].key = -1;
                table[index].value = 0; // hoặc giá trị mặc định khác
                return true;
            }
        }
        return false;
    }
    bool search(int key, int& value){
        int h = hash(key);
        for(int i = 0; i < table.size(); i++) {
            int index = (h + i) % table.size();
            if(table[index].key == -1) return false; // Không tìm thấy
            if(table[index].key == key) {
                value = table[index].value;
                return true;
            }
        }
        return false;
    }
    void Print() const {
        cout << "Key/Value: ";
        for(int i = 0; i < table.size(); i++){
            if(table[i].key == -1) cout << "Empty ";
            else cout << table[i].key << "/" << table[i].value << " ";
        }
        cout << endl;
    }
};


///
class Graph
{
private:
    int V;
    vector<vector<int>> adjMaxtrix;

public:
    Graph(int vertical): V(vertical){
        adjMaxtrix.resize(V, vector<int> (V, 0));
    }
    void addedge(int dest, int src, int weight){
        adjMaxtrix[dest][src] = weight;
        adjMaxtrix[src][dest] = weight;
    }
    void Prim(int source){
        vector<int> key (V, INT_MAX);
        vector<int> parent(V, -1);
        vector<bool> inMST (V, false);
        key[source] = 0;
        for(int count = 0; count < V; count++){
            int u = -1, minKet = INT_MAX;
            for(int v= 0; v < V; v++){
                if(!inMST[v] && key[v] < minKet){
                    u = v;
                    minKet = key[v];
                }
            }
            if(u == -1) return;
            inMST[u] = true;
            for(int v= 0; v < V; v++){
                if(!inMST[v] && adjMaxtrix[u][v] && key[v] > adjMaxtrix[u][v]){
                    key[v] = adjMaxtrix[u][v];
                    parent[v] = u;
                }
            }
        }
    }
    void PrimAdvance(int source){
        vector<int> key (V, INT_MAX);
        vector<int> parent(V, -1);
        vector<bool> inMST (V, false);
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        key[source] = 0;
        pq.push({0, source}); // Đúng: {key, vertex}
        while(!pq.empty()){
            int u = pq.top().second;
            pq.pop(); // Thiếu pop
            if(inMST[u]) continue; // Tránh xử lý lại đỉnh đã thuộc MST
            inMST[u] = true;
            for(int v =0; v < V; v++){
                if(!inMST[v] && adjMaxtrix[u][v] && key[v] > adjMaxtrix[u][v]){
                    key[v] = adjMaxtrix[u][v];
                    parent[v] = u;
                    pq.push({key[v], v}); // Đúng thứ tự
                }
            }
        }
    }
};
///
class Graph {
private:
    int V;
    vector<vector<int>> adjMatrix;
public: 
    Graph(int vertices) : V(vertices) {
        adjMatrix.resize(V, vector<int>(V, 0));
    }

    void addEge(int src, int dest, int weight){
        adjMatrix[src][dest] = weight;
        adjMatrix[dest][src] = weight; // For undirected graph
    }
    void Prim(int source) {
        vector<int> key(V, INT_MAX);
        vector<int> parent(V, -1);
        vector<bool> inMST(V, false);
        key[source] = 0;

        for (int count = 0; count < V - 1; count++) {
            int u = -1, minKey = INT_MAX;
            // Find the vertex with the minimum key value not yet included in MST
            for (int v = 0; v < V; v++) {
                if (!inMST[v] && key[v] < minKey) {
                    minKey = key[v];
                    u = v;
                }
            }

            if (u == -1) break; // All vertices included or disconnected graph

            inMST[u] = true;

            // Update key and parent for adjacent vertices
            for (int v = 0; v < V; v++) {
                if (adjMatrix[u][v] && !inMST[v] && adjMatrix[u][v] < key[v]) {
                    key[v] = adjMatrix[u][v];
                    parent[v] = u;
                }
            }
        }

        // Output the MST
        cout << "Edge \tWeight\n";
        for (int i = 0; i < V; i++) {
            if (parent[i] != -1)
                cout << parent[i] << " - " << i << "\t" << adjMatrix[i][parent[i]] << "\n";
        }
    }

    void Dijkstra(int source) {
        vector<int> dist(V, INT_MAX);
        vector<bool> visited(V, false);
        dist[source] = 0;

        for (int count = 0; count < V - 1; count++) {
            int u = -1, minDist = INT_MAX;
            // Find the vertex with the minimum distance value not yet included in the shortest path tree
            for (int v = 0; v < V; v++) {
                if (!visited[v] && dist[v] < minDist) {
                    minDist = dist[v];
                    u = v;
                }
            }

            if (u == -1) break; // All vertices included or disconnected graph

            visited[u] = true;

            // Update distance for adjacent vertices    
            for (int v = 0; v < V; v++) {
                if (adjMatrix[u][v] && !visited[v] && dist[u] + adjMatrix[u][v] < dist[v]) {
                    dist[v] = dist[u] + adjMatrix[u][v];
                }
            }
        }

        // Output the shortest distances
        cout << "Vertex Distance from Source\n";
        for (int i = 0; i < V; i++) {
            cout << i << "\t" << dist[i] << "\n";
        }
    }
    void DijAdvace(int vertex){
    vector<int> key(V, INT_MAX);
    vector<bool> visited(V, false);
    vector<int> parent(V, -1);

    // Min-heap (distance, vertex)
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;

    key[vertex] = 0;
    pq.push({0, vertex});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        if (visited[u]) continue;
        visited[u] = true;

        for (int v = 0; v < V; v++) {
            if (adjMatrix[u][v] > 0 && !visited[v]) {
                int newDist = key[u] + adjMatrix[u][v];
                if (newDist < key[v]) {
                    key[v] = newDist;
                    parent[v] = u;
                    pq.push({key[v], v});
                }
            }
        }
    }

    printPaths(key, parent);
}
    void printPaths(vector<int> key, vector<int> parent){
        cout << "vertex\tdistance\tpath";
        for(int i = 0; i < V; i++){
            if(key[i] == INT_MAX)
            cout << i << " INF " << " - ";
            else{
            cout << i << " " << key[i] ;
            printPath(i, parent);
            }
        }
    }
    void printPath(int dest, vector<int> parent){
        if(parent[dest] == -1) {
            cout << dest ;
            return;
        } 
        printPath(parent[dest], parent);
        cout << " -> " << dest; 

    }
}; 

};
